#!/usr/bin/env ruby
# frozen_string_literal: true

# Ruby internal
require 'pp'
# Project internal
require 'pass_station'
require 'pass_station/output'
# External
require 'docopt'
require 'paint'

doc = <<~DOCOPT
  Pass Station

  Usage:
    pass-station list [--sort <col>] [--json | --csv | --yaml | --table | --pretty-table] [--no-color]
    pass-station update ([--force] <path> | --check)
    pass-station -h | --help
    pass-station --version

  List options: list all default credentials
    -s <col>, --sort <col>  Sort by column: productvendor (default) | username | password

  Output options: can be used with list and search commands
    -j, --json            Display output in JSON
    -c, --csv             Display output in CSV
    -y, --yaml            Display output in YAML
    -t, --table           (Default) Display output in simple columns, easy to use with awk, cut, grep
    -tp, --pretty-table   Display output in ASCII table

  Update options: update the password database
    -f, --force   Bypass hash checking
    -c, --check   Check for possible update

  Other options:
    --no-color  Disable colorized output
    --debug     Display arguments
    -h, --help  Show this screen
    --version   Show version
DOCOPT

begin
  args = Docopt.docopt(doc, version: PassStation::VERSION)
  Paint.mode = 0 if args['--no-color']
  pp args if args['--debug']
  if args['update']
    if args['<path>']
      opts = {}
      opts[:sha256] = args['--force'] ? nil : PassStation::DB::UPSTREAM_DATABASE[:HASH]
      puts '[+] Updating database'
      path = PassStation::DB.download_upstream(args['<path>'], opts)
      if path
        puts "[+] Database updated #{path}"
      else
        puts '[+] Database already up to date'
      end
    elsif args['--check']
      if PassStation::DB.check_for_update
        puts '[+] Update available'
      else
        puts '[+] No update available'
      end
    end
  elsif args['list']
    ps = PassStation::DB.new
    ps.parse.each do |row|
      print Paint["#{row[:productvendor]} ", :red]
      print Paint["#{row[:username]} ", :blue]
      print Paint["#{row[:password]}\n", :green]
    end
  end
rescue Docopt::Exit => e
  puts e.message
end
