#!/usr/bin/env ruby
# frozen_string_literal: true

# Ruby internal
require 'pp'
# Project internal
require 'pass_station'
require 'pass_station/output'
# External
require 'docopt'
require 'paint'

doc = <<~DOCOPT
  Pass Station

  Usage:
    pass-station list [--sort <col> --output <format>] [--debug]
    pass-station search <term> [--field <col> --sort <col> --sensitive --output <format>] [--no-color --debug]
    pass-station update ([--force] <path> | --check) [--debug]
    pass-station -h | --help
    pass-station --version

  List options: list all default credentials

  Output options: can be used with list and search commands
    -o <format>, --output <format>  Output format: JSON, CSV, YAML, table, pretty-table [default: pretty-table]
    -s <col>, --sort <col>          Sort by column: productvendor | username | password [default: productvendor]

  Search options:
    --field <col>   Search in column: productvendor | username | password | all [default: productvendor]
    --sensitive     Search is case sensitive (case insensitive by default)

  Update options: update the password database (replace Pass Station DB with upstream DB, use with care)
    -f, --force   Bypass hash checking
    -c, --check   Check for possible update

  Other options:
    --no-color  Disable colorized output
    --debug     Display arguments
    -h, --help  Show this screen
    --version   Show version
DOCOPT

begin
  args = Docopt.docopt(doc, version: PassStation::VERSION)
  Paint.mode = 0 if args['--no-color']
  pp args if args['--debug']
  if args['update']
    if args['<path>']
      opts = {}
      opts[:sha256] = args['--force'] ? nil : PassStation::DB::UPSTREAM_DATABASE[:HASH]
      puts '[+] Updating database'
      path = PassStation::DB.download_upstream(args['<path>'], opts)
      if path
        puts "[+] Database updated #{path}"
      else
        puts '[+] Database already up to date'
      end
    elsif args['--check']
      if PassStation::DB.check_for_update
        puts '[+] Update available'
      else
        puts '[+] No update available'
      end
    end
  elsif args['list']
    ps = PassStation::DB.new
    ps.parse(args['--sort'].to_sym)
    puts ps.output_list(args['--output'])
  elsif args['search']
    ps = PassStation::DB.new
    ps.parse(args['--sort'].to_sym)
    ps.search(args['<term>'], args['--field'].to_sym, sensitive: args['--sensitive'])
    output = ps.output_search(args['--output'])
    puts '[-] No result' if output.empty?
    puts ps.highlight_found(args['<term>'], output, args['--sensitive'])
  end
rescue Docopt::Exit => e
  puts e.message
end
